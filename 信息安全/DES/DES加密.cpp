#include <iostream>
using namespace std;
string str="0123456789abcdef";//64位明文字符串
string key="0123456789abcdef";//64位密钥字符串
int bin_s[64],bin_k[64];///64位明文和64位密钥；
int l[32],r[32];
int low_k[16][56];///去掉奇偶校验位后的56位密钥
int rl[64];//储存最后得到的密文
///选择置换 换位表1;
int op_rep[56]={57,49,41,33,25,17,9,1,58,50,42,34,26,18,
    10,2,59,51,43,35,27,19,11,3,60,52,44,36,
    63,55,47,39,31,23,15,7,62,54,46,38,30,22,
    14,6,61,53,45,37,29,21,13,5,28,20,12,4};
///选择置换 换位表2;
int op_rep2[48]={14,17,11,24,1,5,3,28,15,6,21,10,
    23,19,12,4,26,8,16,7,27,20,13,2,
    41,52,31,37,47,55,30,40,51,45,33,48,
    44,49,39,56,34,53,46,42,50,36,29,32};
///每轮移动的轮位数;
int run[17]={0,1,1,2,2,2,2,2,2,1,2,2,2,2,2,2,1};
///扩展置换;
int ex_rep[48]={32,1,2,3,4,5,4,5,6,7,8,9,8,9,10,11,12,13,12,13,14,15,16,17,
    16,17,18,19,20,21,20,21,22,23,24,25,24,25,26,27,28,29,28,29,30,31,32,1};
int c[28],d[28];

///S盒;
int s1[4][16]={14,4,13,1,2,15,11,8,3,10,6,12,5,9,0,7,
    0,15,7,4,14,2,13,1,10,6,12,11,9,5,3,8,
    4,1,14,8,13,6,2,11,15,12,9,7,3,10,5,0,
    15,12,8,2,4,9,1,7,5,11,3,14,10,0,6,13
};
int s2[4][16]={15,1,8,14,6,11,3,4,9,7,2,13,12,0,5,10,
    3,13,4,7,15,2,8,14,12,0,1,10,6,9,11,5,
    0,14,7,11,10,4,13,1,5,8,12,6,9,3,2,15,
    13,8,10,1,3,15,4,2,11,6,7,12,0,5,14,9
};
int s3[4][16]={10,0,9,14,6,3,15,5,1,13,12,7,11,4,2,8,
    13,7,0,9,3,4,6,10,2,8,5,14,12,11,15,1,
    13,6,4,9,8,15,3,0,11,1,2,12,5,10,14,7,
    1,10,13,0,6,9,8,7,4,15,14,3,11,5,2,12
};
int s4[4][16]={7,13,14,3,0,6,9,10,1,2,8,5,11,12,4,15,
    13,8,11,5,6,15,0,3,4,7,2,12,1,10,14,9,
    10,6,9,0,12,11,7,13,15,1,3,14,5,2,8,4,
    3,15,0,6,10,1,13,8,9,4,5,11,12,7,2,14
};
int s5[4][16]={2,12,4,1,7,10,11,6,8,5,3,15,13,0,14,9,
    14,11,2,12,4,7,13,1,5,0,15,10,3,9,8,6,
    4,2,1,11,10,13,7,8,15,9,12,5,6,3,0,14,
    11,8,12,7,1,14,2,13,6,15,0,9,10,4,5,3
};
int s6[4][16]={12,1,10,15,9,2,6,8,0,13,3,4,14,7,5,11,
    10,15,4,2,7,12,9,5,6,1,13,14,0,11,3,8,
    9,14,15,5,2,8,12,3,7,0,4,10,1,13,11,6,
    4,3,2,12,9,5,15,10,11,14,1,7,6,0,8,13
};
int s7[4][16]={4,11,2,14,15,0,8,13,3,12,9,7,5,10,6,1,
    13,0,11,7,4,9,1,10,14,3,5,12,2,15,8,6,
    1,4,11,13,12,3,7,14,10,15,6,8,0,5,9,2,
    6,11,13,8,1,4,10,7,9,5,0,15,14,2,3,12
};
int s8[4][16]={13,2,8,4,6,15,11,1,10,9,3,14,5,0,12,7,
    1,15,13,8,10,3,7,4,12,5,6,11,0,14,9,2,
    7,11,4,1,9,12,14,2,0,6,10,13,15,3,5,8,
    2,1,14,7,4,10,8,13,15,12,9,0,3,5,6,11
};
///置换运算P;
int p[32]={16,7,20,21,29,12,28,17,1,15,23,26,5,18,31,10,
    2,8,24,14,32,27,3,9,19,13,30,6,22,11,4,25};
///逆初始置换IP^-1;
int ip_1[64]={40,8,48,16,56,24,64,32,
    39,7,47,15,55,23,63,31,
    38,6,46,14,54,22,62,30,
    37,5,45,13,53,21,61,29,
    36,4,44,12,52,20,60,28,
    35,3,43,11,51,19,59,27,
    34,2,42,10,50,18,58,26,
    33,1,41,9,49,17,57,25
};


void init(){///将字符串明文和字符串密钥转换成二进制存到数组中;
    for(int i=0;i<16;i++){
        int n;
        if(str[i]>='0'&&str[i]<='9'){
            n=str[i]-'0';
        }
        else if(str[i]>='a'&&str[i]<='z'){
            n=10+str[i]-'a';
        }
        else{
            n=10+str[i]-'A';
        }
        for(int j=i*4+3;j>=i*4;j--){
            bin_s[j]=n%2;
            n/=2;
        }
        if(key[i]>='0'&&key[i]<='9'){
            n=key[i]-'0';
        }
        else if(key[i]>='a'&&key[i]<='z'){
            n=10+key[i]-'a';
        }
        else{
            n=10+key[i]-'A';
        }
        for(int j=i*4+3;j>=i*4;j--){
            bin_k[j]=n%2;
            n/=2;
        }
    }
}

void init_replace(){///初始置换，得到L0和R0;
    int j=-1;
    for(int i=0;i<32;i++){
        if(i%8==0) j++;
        l[i]=bin_s[((57-i*8+j*2)%64+64)%64];
        r[i]=bin_s[((56-i*8+j*2)%64+64)%64];
    }
}

void ex_replace(int k){///对r进行扩展置换后和子密钥异或;
    int ex_r[48];
    for(int i=0;i<48;i++){
        ex_r[i]=r[ex_rep[i]-1];
        ex_r[i]^=low_k[k][i];
    }
    int rs[32];
    /////////S盒替换;
    int i=0,s_r,s_c,sn;
    s_r=ex_r[0+i*6]*2+ex_r[5+i*6];
    s_c=ex_r[1+i*6]*8+ex_r[2+i*6]*4+ex_r[3+i*6]*2+ex_r[4+i*6];
    sn=s1[s_r][s_c];
    for(int j=3+i*4;j>=0+i*4;j--){
        rs[j]=sn%2;
        sn/=2;
    }
    i++;
    s_r=ex_r[0+i*6]*2+ex_r[5+i*6];
    s_c=ex_r[1+i*6]*8+ex_r[2+i*6]*4+ex_r[3+i*6]*2+ex_r[4+i*6];
    sn=s2[s_r][s_c];
    for(int j=3+i*4;j>=0+i*4;j--){
        rs[j]=sn%2;
        sn/=2;
    }
    i++;
    s_r=ex_r[0+i*6]*2+ex_r[5+i*6];
    s_c=ex_r[1+i*6]*8+ex_r[2+i*6]*4+ex_r[3+i*6]*2+ex_r[4+i*6];
    sn=s3[s_r][s_c];
    for(int j=3+i*4;j>=0+i*4;j--){
        rs[j]=sn%2;
        sn/=2;
    }
    i++;
    s_r=ex_r[0+i*6]*2+ex_r[5+i*6];
    s_c=ex_r[1+i*6]*8+ex_r[2+i*6]*4+ex_r[3+i*6]*2+ex_r[4+i*6];
    sn=s4[s_r][s_c];
    for(int j=3+i*4;j>=0+i*4;j--){
        rs[j]=sn%2;
        sn/=2;
    }
    i++;
    s_r=ex_r[0+i*6]*2+ex_r[5+i*6];
    s_c=ex_r[1+i*6]*8+ex_r[2+i*6]*4+ex_r[3+i*6]*2+ex_r[4+i*6];
    sn=s5[s_r][s_c];
    for(int j=3+i*4;j>=0+i*4;j--){
        rs[j]=sn%2;
        sn/=2;
    }
    i++;
    s_r=ex_r[0+i*6]*2+ex_r[5+i*6];
    s_c=ex_r[1+i*6]*8+ex_r[2+i*6]*4+ex_r[3+i*6]*2+ex_r[4+i*6];
    sn=s6[s_r][s_c];
    for(int j=3+i*4;j>=0+i*4;j--){
        rs[j]=sn%2;
        sn/=2;
    }
    i++;
    s_r=ex_r[0+i*6]*2+ex_r[5+i*6];
    s_c=ex_r[1+i*6]*8+ex_r[2+i*6]*4+ex_r[3+i*6]*2+ex_r[4+i*6];
    sn=s7[s_r][s_c];
    for(int j=3+i*4;j>=0+i*4;j--){
        rs[j]=sn%2;
        sn/=2;
    }
    i++;
    s_r=ex_r[0+i*6]*2+ex_r[5+i*6];
    s_c=ex_r[1+i*6]*8+ex_r[2+i*6]*4+ex_r[3+i*6]*2+ex_r[4+i*6];
    sn=s8[s_r][s_c];
    for(int j=3+i*4;j>=0+i*4;j--){
        rs[j]=sn%2;
        sn/=2;
    }
    ///////P置换运算
    int rsp[32];
    for(int i=0;i<32;i++){
        rsp[i]=rs[p[i]-1];
    }
    ///将得到的数组与l数组异或，并得到新的l,r数组;
    for(int i=0;i<32;i++){
        rsp[i]^=l[i];
        l[i]=r[i];
        r[i]=rsp[i];
    }
}

void _final(){///将r数组和l数组合并，得到二进制密文
    int rl1[64];
    for(int i=0;i<32;i++){
        rl1[i]=r[i];
        rl1[i+32]=l[i];
    }
    for(int i=0;i<64;i++){
        rl[i]=rl1[ip_1[i]-1];
    }
}

void _key(){///删去密钥的奇偶校验位;
    int j=0;
    for(int i=0;i<56;i++,j++){
        low_k[0][i]=bin_k[op_rep[i]-1];
    }
}

void op_replace(){///第一次选择置换得到C0和D0;
    for(int i=0;i<28;i++){
        c[i]=low_k[0][i];
        d[i]=low_k[0][i+28];
    }
}

void _left(int k){///循环左移，合并子密钥
    int k1=k;
    k=run[k];
    int n[2];
    int cd[56];
    for(int i=0;i<k;i++)
        n[i]=c[i];
    for(int i=0;i<28-k;i++){
        c[i]=c[i+k];
        cd[i]=c[i];
    }
    for(int i=28-k;i<28;i++){
        c[i]=n[i-28+k];
        cd[i]=c[i];
    }
    for(int i=0;i<k;i++)
        n[i]=d[i];
    for(int i=0;i<28-k;i++){
        d[i]=d[i+k];
        cd[i+28]=d[i];
    }
    for(int i=28-k;i<28;i++){
        d[i]=n[i-28+k];
        cd[i+28]=d[i];
    }
    for(int i=0;i<48;i++){
        low_k[k1][i]=cd[op_rep2[i]-1];
    }
}

int main() {
    init();
    init_replace();
    _key();
    op_replace();
    for(int i=1;i<=16;i++){
        _left(i);
        ex_replace(i);
    }
    _final();
    cout<<"得到密文：\n";
    for(int i=0;i<64;i+=4){
        int n=rl[i]*8+rl[i+1]*4+rl[i+2]*2+rl[i+3];
        if(n<10)
            cout<<n;
        else{
            n-=10;
            char c='a'+n;
            cout<<c;
        }
    }
    cout<<endl;
    return 0;
}
